﻿@{
    ViewData["Title"] = "Home Page";

}
@model CreateAd
<script>
    function enter(x) {
        x.style.backgroundColor = "#B8CDE5"
    }
    function leave(x) {
        x.style.backgroundColor = "Transparent"
    }
    function onClick(x) {
        if(document.getElementById("AdTypeI")  == x))
        {
            x.style.backgroundColor = "#000000"
            document.getElementById("AdTypeE").style.backgroundColor = "Transparent"
        }
        else
        {
            x.style.backgroundColor = "#B8CDE5"
            document.getElementById("AdTypeI").style.backgroundColor = "Transparent"
        }

    }
</script>
<div style="text-align: center;">
    <h1 style="min-width:445px; margin:0 auto;text-align:center;">Create an Advertisement</h1>
    <h7 style="color:#3B7CC8;text-align:center;">Please read the FAQ prior to first use. Thank you!</h7>
</div>

@*Created Internally Button*@
@using (Html.BeginForm("Internal", "CreateAd", FormMethod.Post, new { @style = "min-width:445px; align-items:center; text-align:center;" }))
{

    <div class="container" style="min-width:445px; text-align:center; align-items:center;">
            <input type="submit" id="AdTypeI" name="AdType" value="" style="background-image:url(https://i.ibb.co/CtHnSrz/Created-Internally.png); width:350px; height:50px; background-size:contain; background-repeat:no-repeat;
            border-radius:5px; border:1px solid #3B7CC8; background-position:center; color:transparent;
            margin-left:auto; margin-right:auto;" onclick="onClick(this)" onmouseover="enter(this)">
        </div>
}
@*Ad Agency Button*@
@using (Html.BeginForm("External", "CreateAd", FormMethod.Post, new { @style = "min-width:445px;" }))
{
        <div class="container" style="text-align:center;">
            <input type="submit" id="AdTypeE" name="AdType" style="background-image:url(https://i.ibb.co/GpBLL4F/Ad-Agency.png); width:350px; height:50px; background-size:contain; background-repeat:no-repeat;
            border-radius:5px; border:1px solid #3B7CC8; background-position:center; color:transparent;
            margin-left:auto; margin-right:auto;" onclick="onClick(this)" onmouseover="enter(this)">
        </div>
}
<hr>
@*Inputs*@
@using (Html.BeginForm("Submit", "CreateAd", FormMethod.Post, new { @style = "min-width:445px; align-self:center; align-items:center; align-content:center; margin-left: 0px " }))
{
        <div class="container" style="min-width:650px;  align-content:center; align-self:center; align-items:center;text-align:left; ">

        @*AdCode*@
        <div class="container" style="min-width:445px; align-self:center; padding-left:0px">
            <label class="switch" style="align-self:center; ">
                    <input type="checkbox" id="trigger" name="question">              
                    <span class="slider round"></span>
                </label>
                <label >Toggle switch to enter a custom AdCode.</label>
            </div>

        <div class="container" style="min-width:445px;padding-left:0px">
                <label style="font-size:X-large; text-align:left; width:240px"><label style="font-size:X-large; color: #cb444a ">*</label>AdCode:</label>
                <div id="hidden_fields" name="hidden" style="width:240px; display:inline-block">
                @Html.TextBoxFor(m => m.CustomAdCode, new{@id = "txtAdCode1", @style = "width:240px;"})
                </div>
                <label style="font-size:large;" id="kcInternal"> @ViewBag.AdCodeInternal </label>
                <label style="font-size:large" id="kcExternal"> @ViewBag.AdCodeExternal </label>
                <label style="color: #cb444a;">@ViewBag.AdCodeError</label>
            </div>

        @*Ad Start Date*@
            <div class="container" style="min-width:445px;padding-left:0px">
                <label style="font-size:X-large; width:240px "><label style="font-size:X-large; color: #cb444a ">*</label>Ad Start Date:</label>
            @Html.TextBoxFor(m => m.Date, new{@type = "date", @style = "width: 240px; margin-bottom: -100px;"})
            @Html.ValidationMessageFor(m => m.Date, "" , new{@class= "text-danger", @style=""})
            </div>

        @*PrimaryAd*@
            <div class="container" style="min-width:445px; padding-left:0px">
                <label style="font-size:X-large; width:240px "><label style="font-size:X-large; color: #cb444a ">*</label>Primary Ad Name:</label>
                    <div class="autocomplete" style=" text-align:center; width:240px;">
                @Html.TextBoxFor(m => m.myInput, new{@type = "text", @name="myPrimaryAdName", @placeholder="Primary Ad Name", @autocomplete="off", @style = "width:240px;"})
                    </div>
                <label style="color: #cb444a;">@ViewBag.SourceError</label>
            </div>

        @*SecondaryAd*@
        <div class="container" style="min-width:445px; padding-left:0px">
            <label style="font-size:X-large; width:240px "><label style="font-size:X-large; color: #cb444a ">*</label>Secondary Ad Name:</label>
            <div class="autocomplete" style=" text-align:center; width:240px;">
                @Html.TextBoxFor(m => m.mySecondary, new{@type = "text", @name="mySecondaryAdName", @placeholder="Secondary Ad Name", @autocomplete="off", @style = "width:240px;"})
            </div>
            <label style="color: #cb444a;">@ViewBag.SourceError</label>
        </div>
        @*Ad VersionID*@
            <div class="container" style="min-width:445px; padding-left:0px">
                <label style="font-size:X-large; width:240px"><label style="font-size:X-large; color: #cb444a; ">*</label>Ad VersionID:</label>
            @Html.TextBoxFor(m => m.AdVersionID, new{@style="width: 240px"})
            @Html.ValidationMessageFor(m => m.AdVersionID, "" , new{@class= "text-danger", @style=""})
                <label style="color: #cb444a;">@ViewBag.AdVersionIDError</label>
            </div>
        @*Offer Product*@
         @*   <div class="container" style="min-width:445px;">
                <label style="font-size:X-large; width:240px "><label style="font-size:X-large; color: #cb444a ">*</label>Offer Product:</label>
                <div class="autocomplete" style=" text-align:center; width:240px;">
                @Html.TextBoxFor(m => m.AdVersionProduct, new{@type = "text", @name="myAdVersionProduct", @placeholder="Offer Product Line", @autocomplete="off", @style = "width:240px;"})
                </div>
                <label style="color: #cb444a; display:inline-block">@ViewBag.AdVersionProductError</label>
            </div>*@

        @*Ad Spend *@
            <div class="container" style="min-width:445px; padding-left:0px">
                <label style="font-size:X-large; width:240px "><label style="font-size:X-large; color: #cb444a ">*</label>Ad Spend Amount:</label>
            @Html.TextBoxFor(m => m.AdSpendAmount, new{@style="width:240px;"})
            @Html.ValidationMessageFor(m => m.AdSpendAmount, "" , new{@class= "text-danger", @style=""})
                <label style=" color: #cb444a;">@ViewBag.AdSpendpendAmountError</label>
            </div>
        @*Ad Start Date*@
            <div class="container" style="min-width:445px; padding-left:0px">
                <label style="font-size:X-large; width:240px "><label style="font-size:X-large; color: #cb444a ">*</label>Ad Spend Date:</label>
            @Html.TextBoxFor(m => m.SpendDate, new{@type = "date", @style = "width: 240px; margin-bottom: -100px;"})
            @Html.ValidationMessageFor(m => m.SpendDate, "" , new{@class= "text-danger", @style=""})
            </div>
        @*Ad Category*@
        <div class="container" style="min-width:445px; padding-left:0px">
            <label style="font-size:X-large; width:240px "><label style="font-size:X-large; color: #cb444a ">*</label>Ad Category:</label>
            <div class="autocomplete" style=" text-align:center; width:240px;">
                @Html.DropDownListFor(m => m.AdCategory, new List<SelectListItem>{
            new SelectListItem { Value = "TV" , Text = "TV" }, new SelectListItem { Value = "MEDIA" , Text = "MEDIA" }, new SelectListItem { Value = "WEB" , Text = "WEB" }
            }, new { @class="myselect", @style = "width: 240px; margin-bottom: -100px;"})
            </div>
            <label style="color: #cb444a;">@ViewBag.SourceError</label>
        </div>
        @*In Circulation*@
        <div class="container" style="min-width:445px; padding-left:0px">
            <label style="font-size:X-large; width:240px"><label style="font-size:X-large; color: #cb444a ">&nbsp</label>In Circulation:</label>
            @Html.TextBoxFor(m => m.Circulation, new{@style="width:240px;"})
            @Html.ValidationMessageFor(m => m.Circulation, "" , new{@class= "text-danger", @style=""})
        </div>

        @*Region*@
        @*<div class="container" style="min-width:445px;">
            <label style="font-size:X-large; width:240px"><label style="font-size:X-large; color: #cb444a ">&nbsp</label>Region:</label>
            @Html.TextBoxFor(m => m.Region, new{@style="width:240px;"})
        </div>*@
        @*Page Number*@
        @*<div class="container" style="min-width:445px;">
                <label style="font-size:X-large; width:240px"><label style="font-size:X-large; color: #cb444a ">&nbsp</label>Page Number:</label>
            @Html.TextBoxFor(m => m.PageNumber, new{@style="width:240px;"})
            @Html.ValidationMessageFor(m => m.PageNumber, "" , new{@class= "text-danger", @style=""})
        </div>*@

        @*Phone Number*@
        <div class="container" style="min-width:445px; padding-left:0px">
                <label class="switch" style="">
                    <input type="checkbox" id="trigger1" name="question">
                    <span class="slider round"></span>
                </label>
            <label style="width:300px;">Toggle switch to generate TFN</label>
            @Html.TextBoxFor(m => m.CheckPhone, new{@id = "txtCheckPhone", @style = "width:240px; visibility: hidden"})
            </div>
            <br />
        </div>
    @*Submit button*@
    <div class="container" style="text-align:center; padding-left:0px">
                <input type="submit" id="btnSubmit"
                           style="background-image:url(https://i.ibb.co/9hVt59m/Submit.png); width:170px; height:40px;
            border-radius:5px; border:1px solid #3B7CC8; background-position:center; color:transparent;"
                onmouseover="mouseover(this)"
                onmouseout = "mouseout(this)" />
            </div>


    @*Insert Success/Failure notification*@
    <div class="container" style="min-width:445px; text-align:center; padding-left:0px">
                <label style="color:#cb444a;">@ViewBag.InsertError</label>
                <label style="color:#53a451;">@ViewBag.InsertSuccess</label>
            </div>



            <div style="position:absolute; top:31%; left: 15%;">
                <label style="font-size:X-Large; color:Black;">@ViewBag.SubSum</label> <br>
                <label style="font-size:Large; color:Black;">@ViewBag.AdCode</label> <br>
                <label style="font-size:Large; color:Black;">@ViewBag.StartDate</label> <br>
                <label style="font-size:Large; color:Black;">@ViewBag.PrimaryName</label><br>
                <label style="font-size:Large; color:Black;">@ViewBag.SecondaryName</label><br>
                <label style="font-size:Large; color:Black;">@ViewBag.AdVersionID</label><br>
                <label style="font-size:Large; color:Black;">@ViewBag.AdSpend</label><br>
                <label style="font-size:Large; color:Black;">@ViewBag.SpendDate</label><br>                
                <label style="font-size:Large; color:Black;">@ViewBag.AdCategory</label><br>
                <label style="font-size:Large; color:Black;">@ViewBag.InCirculation</label><br>
                <label style="font-size:Large; color:Black;">@ViewBag.Product</label><br>
            </div>


}



<script>

    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.AdCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.AdCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.AdCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }

    /*An array containing all the country names in the world:*/
    var countries = ["$100 OFF SL SCOOTER", "AAA - New Mexico", "AAA - Southern", "AAA - Tidewater", "AAA LIVING MAGAZINE", "AAA LIVING", "AAA MOTORIST", "AAA N. CAL VIA", "AAA TEXAS EXPLORER", "AAA TIDEWATER", "AAA VIA", "AAA WORLD", "AAA-ALABAMA", "AAA-EXPLORER", "AAA-MIDWEST", "AAA-NEW MEXICO", "AAA-SOUTHERN", "AAA-TEXAS", "AAA-VIA", "AAA-WESTERN JOURNEY", "AARP BULLETIN", "AARP FREE RESOURCES", "AARP Mag 70+ CA", "AARP Mag 70+ Fl", "AARP MODERN MATURITY", "ACCUWEATHER", "AFC FARMING NEWS", "Agent Discount Test", "ALABAMA LIVING", "ALL SO LITE $50 OFF", "AMAC ADVANTAGE", "AMAZON SALES", "AMERICA'S CIVIL WAR", "AMERICA'S FIRST", "AMERICAN LEGION", "AMERICAS FIRST FREED", 
    "ANGELS ON EARTH", "ANTENNA TV", "ANTIQUE POWER", "AOPA PILOT", "ARCHAEOLOGY MAGAZINE", "ARKANSAS LIVING", "ARTIST'S MAGAZINE,", "AUG 22 MAILER", "BALTIMORE BEACON", "BEAR ALLEY AUG 22", "BEAR ALLEY MARKETING", "BEAR ALLEY", "BET", "BIBLICAL ARCHAEOLOGY", "BIRDS & BLOOMS", "BULBS FOR LIFE", "BUZZR", "CAROLINA COUNTRY", "CLIPPER #21", "CLIPPER #23", "CLIPPER #7", "CLIPPER #8", "CLIPPER (#14)", "CLIPPER (#21)", "CLIPPER (#7)", "CLIPPER (#8)", "CLIPPER MAGAZINE", "CLOSED", "CLOSER", "COIN MAGAZINE", "Colorado Country Life", "COMET", "COOPERATIVE LIVING", "COUNTRY EXTRA", "COURT TV", "COZI PLUS", "CUSTOMER SERVICE", "CW 100 PLUS", "DC BEACON", "DECADES", "DEFAULT SLEEP CHAIR", 
    "DEFAULT ZINGER TV", "ELKS MAGAZINE", "EMPLOYEE PURCHASES", "Enchantment (NM)", "EXCHANGE FOR", "Explorer New Mexico", "Explorer Southern", "Explorer Tidewater", "FAMILY TREE", "FARM JOURNAL", "FARMER'S ALMANAC", "FETV", "FLORIDA CURRENTS", "Florida Farm & Famil", "FRA TODAY", "FS Warm Transfers 14", "G All Other Products", 
    "G Bed Rail", "G Magnifier", "G Mobility", "G PSC BR", "G PSC NB", "G PSC Shop", "G SL Glide Brand", "G SL NB", "G SL Scooter Brand", "G SL Shop", "G SL WC Brand", "G Toilet Lift", "G Upbed Shop", "G Zing Brand", "G Zing Zoom Shop", "G Zoom Brand", "GAC LIVING", "Gannett / PiQ", "GANNETT BASE BUY", "GANNETT PFP", "GEORGIA MAGAZINE", "GEORGIA NEIGHBORS", "GET TV", "Globe Examiner", "GLOBE GROUP", "GLOBE/NATIONAL EXAM", "GOOD OLD DAYS", "GREAT AMERICAN", "GRIT", "GSN TV", "GUIDEPOSTS", "HARPER'S MAGAZINE", "HEMMINGS CLASSIC CAR", "HEROES & ICONS", "HOWARD COUNTY BEACON", "HSN RETAIL", "Illinois Country Living", "Incremental Inserts", "INDIANA CONNECTION", "INSP", "JIM CORNETTE PODCAST", 
    "JOURNEY AIR $50 OFF", "July 4th  $125 OFF", "JUST CL", "KAPPA PUBLISHING", "KENTUCKY LIVING", "LIFESTYLES AFTER 50", "LIGOURIAN MAGAZINE", "LOUISIANA COUNTRY", "M SPARK", "M_All_Other_Shop", "M_Mobility_Shop", "M_SLEEP_BRAND", "M_Sleep_Shop", "M_Zinger_Brand", "M_Zoomer_Brand", "MAIN LINE CHRONICLES", "MeTV National Networ", "METV", "MILITARY HERITAGE", "MILITARY OFFICER", "MILITARY", "Mississippi Farm", "MOMENTUM", "MOOSE MAGAZINE", "MOTHER JONES", "MOVIES!", "MSPARK", "MY INDIANA HOME", "NARFE", "NATIONAL ENQUIRER", "NATIONAL WEEKLY", "NATIONAL WILDLIFE", "NC Field & Family", "NE MEXICO", "NEA RETIRED", "NEBRASKA MAGAZINE", "NEW MEXICO", "NEW PHONE NUMBER", "NEWSMAX MAGAZINE", "NJ NEWSPAPER NETWORK", 
    "NO CHARGE REPLACEMEN", "NO CODE RETAIL", "NO CODE", "NORTH CAROLINA FIELD", "NORTH DAKOTA LIVING", "NOSTALGIC AMERICA", "NOT BORN YESTERDAY", "NOT OLD BETTER", "NOV 23 BUYER'S GUIDE", "NUMISMATIC NEWS", "OCT 23 BUYER'S GUIDE", "OHIO COOPERATIVE", "OKLAHOMA LIVING", "OLD CARS WEEKLY", "OUTBOUND SALES", "PARADE MAGAZINE", "PARADE", "PENN LINES", "PERFECT SLEEP CHAIR", "Performance iQ", "POSTCARD 2022", "PSC Microsite Phone", "QUILTMAKER", "RDLP", "READER'S DIGEST LARG", "READER'S DIGEST", "RELISH", "Remarketing Discount", "REMARKETING ORDERS", "REMINISCE", "REWIND TV", "RURAL MISSOURI", "RURALITE / ARIZONA", "RURALITE", "Sat Evening Post", "SCOOTER TV NET 10", "SCOOTER TV NET 13", "SCOOTER TV NET 14", "SCOOTER TV NET 8", "SCOOTLE MICROSITE", "SENIOR REPORTER", "SHOPJ CART", "SHOPJ PHONE COMF", "SHOPJ PHONE MOBIL", "SINCLAIR", "SMALL TOWN BIG DEAL", "SMARTSOURCE", "SMITHSONIAN", "SO LITE MOBILITY", "SO LITE WHEELCHAIR", "SOAP OPERA DIGEST", 
    "South Car Living", "SPOKANE SPOKESMAN", "SPRY", "STEVE  DEACE PODCAST", "TASTE OF HOME", "TBD", "Tennessee Home &", "TENNESSEE MAGAZINE", "Texas Co-Op & Power", "THE BEST OF TIMES", "THE FAMILY HANDYMAN", "THE FILIPINO CHANNEL", "THE NATION", "The Saturday Evening Post", "TIDBITS OF COACHELLA", "TIME", "TODAY IN MISSISSIPPI", "TODAY'S SENIOR", "TRACKING SALES ON", "TV GUIDE", "TV LAND", "TV WEEKLY", "UPBED PHONE NUMBER", "USA TODAY SPOTS", "USA Today", "VFW MAGAZINE", "Vietnam Veterans of America", "VIETNAM VETERANS", "VIETNAM", "VIRGINIA COOPERATIVE", "VVA VETERAN", "Website Phone Number", "WIDE ORBIT", "WING WORLD MAGAZINE", "WISCONSIN ENERGY", "WOMAN'S WORLD", "WORLD HARVEST TV", "Wren (WY)", "WREN", "YOUR AAA", "ZINGER SITE PHONE", "ZOOMER SITE PHONE"
    ,];
    
    var products = ["Perfect Sleep Chair","Zoomer","Zinger","So Lite Scooter","So Lite Wheelchair","So Lite Glide","UpWalker","Air Elite","Air","Upbed","Luxe Scooter","Power Toilet Lift","Other", "Adventure Scooter",];
    /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
    autocomplete(document.getElementById("myInput"), countries);
    autocomplete(document.getElementById("AdVersionProduct"), products);
</script>
<style>
    * {
        box-sizing: border-box;
    }

    body {
        font: 16px Arial;
    }

    /*the container must be positioned relative:*/
    .autocomplete {
        position: relative;
        display: inline-block;
    }



    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 0;
        right: 0;
    }

        .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            background-color: #fff;
            border-bottom: 1px solid #d4d4d4;
        }

            /*when hovering an item:*/
            .autocomplete-items div:hover {
                background-color: #e9e9e9;
            }

    /*when navigating through the items using the arrow keys:*/
    .autocomplete-active {
        background-color: DodgerBlue !important;
        color: #ffffff;
    }




    /* The switch - the box around the slider */
    .switch {
        position: relative;
        display: inline-block;
        width: 40px;
        height: 22.68px;
    }

        /* Hide default HTML checkbox */
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    /* The slider */
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 14.742px;
            width: 14.742px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
        }

    input:checked + .slider {
        background-color: #2196F3;
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
        -webkit-transform: translateX(18px);
        -ms-transform: translateX(18px);
        transform: translateX(18px);
    }

    /* Rounded sliders */
    .slider.round {
        border-radius: 34px;
    }

        .slider.round:before {
            border-radius: 50%;
        }
</style>